{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nvar transformData = require('./transformData');\n\nvar isCancel = require('../cancel/isCancel');\n\nvar defaults = require('../defaults');\n\nvar CanceledError = require('../cancel/CanceledError');\n\nvar normalizeHeaderName = require('../helpers/normalizeHeaderName');\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\n\n\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError();\n  }\n}\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\n\n\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config); // Ensure headers exist\n\n  config.headers = config.headers || {}; // Transform request data\n\n  config.data = transformData.call(config, config.data, config.headers, null, config.transformRequest);\n  normalizeHeaderName(config.headers, 'Accept');\n  normalizeHeaderName(config.headers, 'Content-Type'); // Flatten headers\n\n  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);\n  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {\n    delete config.headers[method];\n  });\n  var adapter = config.adapter || defaults.adapter;\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config); // Transform response data\n\n    response.data = transformData.call(config, response.data, response.headers, response.status, config.transformResponse);\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config); // Transform response data\n\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, reason.response.status, config.transformResponse);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};","map":{"version":3,"sources":["C:/Users/dell/Desktop/ChatWebApp/Files/public/node_modules/axios/lib/core/dispatchRequest.js"],"names":["utils","require","transformData","isCancel","defaults","CanceledError","normalizeHeaderName","throwIfCancellationRequested","config","cancelToken","throwIfRequested","signal","aborted","module","exports","dispatchRequest","headers","data","call","transformRequest","merge","common","method","forEach","cleanHeaderConfig","adapter","then","onAdapterResolution","response","status","transformResponse","onAdapterRejection","reason","Promise","reject"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,oBAAD,CAAtB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,yBAAD,CAA3B;;AACA,IAAIK,mBAAmB,GAAGL,OAAO,CAAC,gCAAD,CAAjC;AAEA;AACA;AACA;;;AACA,SAASM,4BAAT,CAAsCC,MAAtC,EAA8C;AAC5C,MAAIA,MAAM,CAACC,WAAX,EAAwB;AACtBD,IAAAA,MAAM,CAACC,WAAP,CAAmBC,gBAAnB;AACD;;AAED,MAAIF,MAAM,CAACG,MAAP,IAAiBH,MAAM,CAACG,MAAP,CAAcC,OAAnC,EAA4C;AAC1C,UAAM,IAAIP,aAAJ,EAAN;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAQ,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBP,MAAzB,EAAiC;AAChDD,EAAAA,4BAA4B,CAACC,MAAD,CAA5B,CADgD,CAGhD;;AACAA,EAAAA,MAAM,CAACQ,OAAP,GAAiBR,MAAM,CAACQ,OAAP,IAAkB,EAAnC,CAJgD,CAMhD;;AACAR,EAAAA,MAAM,CAACS,IAAP,GAAcf,aAAa,CAACgB,IAAd,CACZV,MADY,EAEZA,MAAM,CAACS,IAFK,EAGZT,MAAM,CAACQ,OAHK,EAIZ,IAJY,EAKZR,MAAM,CAACW,gBALK,CAAd;AAQAb,EAAAA,mBAAmB,CAACE,MAAM,CAACQ,OAAR,EAAiB,QAAjB,CAAnB;AACAV,EAAAA,mBAAmB,CAACE,MAAM,CAACQ,OAAR,EAAiB,cAAjB,CAAnB,CAhBgD,CAkBhD;;AACAR,EAAAA,MAAM,CAACQ,OAAP,GAAiBhB,KAAK,CAACoB,KAAN,CACfZ,MAAM,CAACQ,OAAP,CAAeK,MAAf,IAAyB,EADV,EAEfb,MAAM,CAACQ,OAAP,CAAeR,MAAM,CAACc,MAAtB,KAAiC,EAFlB,EAGfd,MAAM,CAACQ,OAHQ,CAAjB;AAMAhB,EAAAA,KAAK,CAACuB,OAAN,CACE,CAAC,QAAD,EAAW,KAAX,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,KAAlC,EAAyC,OAAzC,EAAkD,QAAlD,CADF,EAEE,SAASC,iBAAT,CAA2BF,MAA3B,EAAmC;AACjC,WAAOd,MAAM,CAACQ,OAAP,CAAeM,MAAf,CAAP;AACD,GAJH;AAOA,MAAIG,OAAO,GAAGjB,MAAM,CAACiB,OAAP,IAAkBrB,QAAQ,CAACqB,OAAzC;AAEA,SAAOA,OAAO,CAACjB,MAAD,CAAP,CAAgBkB,IAAhB,CAAqB,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AACjErB,IAAAA,4BAA4B,CAACC,MAAD,CAA5B,CADiE,CAGjE;;AACAoB,IAAAA,QAAQ,CAACX,IAAT,GAAgBf,aAAa,CAACgB,IAAd,CACdV,MADc,EAEdoB,QAAQ,CAACX,IAFK,EAGdW,QAAQ,CAACZ,OAHK,EAIdY,QAAQ,CAACC,MAJK,EAKdrB,MAAM,CAACsB,iBALO,CAAhB;AAQA,WAAOF,QAAP;AACD,GAbM,EAaJ,SAASG,kBAAT,CAA4BC,MAA5B,EAAoC;AACrC,QAAI,CAAC7B,QAAQ,CAAC6B,MAAD,CAAb,EAAuB;AACrBzB,MAAAA,4BAA4B,CAACC,MAAD,CAA5B,CADqB,CAGrB;;AACA,UAAIwB,MAAM,IAAIA,MAAM,CAACJ,QAArB,EAA+B;AAC7BI,QAAAA,MAAM,CAACJ,QAAP,CAAgBX,IAAhB,GAAuBf,aAAa,CAACgB,IAAd,CACrBV,MADqB,EAErBwB,MAAM,CAACJ,QAAP,CAAgBX,IAFK,EAGrBe,MAAM,CAACJ,QAAP,CAAgBZ,OAHK,EAIrBgB,MAAM,CAACJ,QAAP,CAAgBC,MAJK,EAKrBrB,MAAM,CAACsB,iBALc,CAAvB;AAOD;AACF;;AAED,WAAOG,OAAO,CAACC,MAAR,CAAeF,MAAf,CAAP;AACD,GA9BM,CAAP;AA+BD,CAjED","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar CanceledError = require('../cancel/CanceledError');\nvar normalizeHeaderName = require('../helpers/normalizeHeaderName');\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    null,\n    config.transformRequest\n  );\n\n  normalizeHeaderName(config.headers, 'Accept');\n  normalizeHeaderName(config.headers, 'Content-Type');\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      response.status,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          reason.response.status,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}