{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\ChatWebApp\\\\Files\\\\public\\\\src\\\\components\\\\Chatbot.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport axios from 'axios';\nimport './Chatbot.css'; // Define predefined responses\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst predefinedResponses = {\n  \"features\": \"Here are some features of our app: 1. Real-time messaging 2. User profiles 3. Avatar customization. Feel free to ask if you need more details!\",\n  \"error\": \"If you encounter errors, please check the following: 1. Ensure you have a stable internet connection. 2. Check for updates. 3. Restart the app if the issue persists.\",\n  \"issue\": \"If you encounter issues, try the following: 1. Ensure you have a stable internet connection. 2. Check for updates. 3. Restart the app if necessary.\",\n  \"use\": \"To use the app, simply log in/Create new Account, select a contact, and start chatting. You can also customize your profile and set an avatar.\",\n  \"login\": \"For login issues, please check if your username and password are correct. If the problem persists, try resetting your password.\",\n  \"contact\": \"To contact support, please send us an email at sp.singh.302101@gmail.com.\",\n  \"default\": \"Hi there! I'm here to assist you with the features of this app and common issues. If you have any questions or need help, feel free to ask!\"\n};\n\nfunction Chatbot() {\n  _s();\n\n  const [messages, setMessages] = useState([{\n    message: \"Hello! I'm here to help you with the features of this app and any common errors you might encounter. How can I assist you today?\",\n    sentTime: \"just now\",\n    sender: \"Chatbot\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false); // Cohere API Key\n\n  const COHERE_API_KEY = 'CcXjY2oBhjqiWnxPrUe5nKTMByJysMYLkSMNPrek';\n\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages); // Set the typing indicator\n\n    setIsTyping(true); // Fetch response from predefined responses or Cohere API\n\n    const responseMessage = await getChatbotResponse(message);\n    setMessages([...newMessages, {\n      message: responseMessage,\n      sender: \"Chatbot\"\n    }]);\n    setIsTyping(false);\n  }; // Function to fetch response from Cohere API or use predefined responses\n\n\n  async function getChatbotResponse(userMessage) {\n    // Check if message contains any of the predefined keywords\n    const lowercasedMessage = userMessage.toLowerCase();\n\n    for (const [keyword, response] of Object.entries(predefinedResponses)) {\n      if (lowercasedMessage.includes(keyword)) {\n        return response;\n      }\n    } // If no predefined response is found, get response from Cohere API\n\n\n    return getCohereApiResponse(userMessage);\n  } // Function to fetch response from Cohere API\n\n\n  async function getCohereApiResponse(userMessage) {\n    try {\n      const response = await axios.post('https://api.cohere.ai/v1/generate', {\n        model: \"command-xlarge-nightly\",\n        // Adjust based on available models\n        prompt: userMessage,\n        max_tokens: 150,\n        temperature: 0.7\n      }, {\n        headers: {\n          'Authorization': `Bearer ${COHERE_API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(\"Cohere API response:\", response.data); // Log full response\n\n      return response.data.generations[0].text.trim(); // Adjust based on actual response format\n    } catch (error) {\n      console.error(\"Error fetching response from Cohere API:\", error.response ? error.response.data : error.message);\n      return \"Sorry, I'm having trouble responding right now. Please try again later.\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"500px\",\n        width: \"350px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            scrollBehavior: \"smooth\",\n            typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"Chatbot is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 43\n            }, this) : null,\n            children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n              model: message\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chatbot, \"UFLJB0uLrcKtFIZy5tLPHOO74eo=\");\n\n_c = Chatbot;\nexport default Chatbot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"sources":["C:/Users/dell/Desktop/ChatWebApp/Files/public/src/components/Chatbot.jsx"],"names":["React","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","axios","predefinedResponses","Chatbot","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","COHERE_API_KEY","handleSend","newMessage","direction","newMessages","responseMessage","getChatbotResponse","userMessage","lowercasedMessage","toLowerCase","keyword","response","Object","entries","includes","getCohereApiResponse","post","model","prompt","max_tokens","temperature","headers","console","log","data","generations","text","trim","error","position","height","width","map","i"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\r\nimport axios from 'axios';\r\nimport './Chatbot.css';\r\n\r\n// Define predefined responses\r\nconst predefinedResponses = {\r\n  \"features\": \"Here are some features of our app: 1. Real-time messaging 2. User profiles 3. Avatar customization. Feel free to ask if you need more details!\",\r\n  \"error\": \"If you encounter errors, please check the following: 1. Ensure you have a stable internet connection. 2. Check for updates. 3. Restart the app if the issue persists.\",\r\n  \"issue\": \"If you encounter issues, try the following: 1. Ensure you have a stable internet connection. 2. Check for updates. 3. Restart the app if necessary.\",\r\n  \"use\": \"To use the app, simply log in/Create new Account, select a contact, and start chatting. You can also customize your profile and set an avatar.\",\r\n  \"login\": \"For login issues, please check if your username and password are correct. If the problem persists, try resetting your password.\",\r\n  \"contact\": \"To contact support, please send us an email at sp.singh.302101@gmail.com.\",\r\n  \"default\": \"Hi there! I'm here to assist you with the features of this app and common issues. If you have any questions or need help, feel free to ask!\"\r\n};\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      message: \"Hello! I'm here to help you with the features of this app and any common errors you might encounter. How can I assist you today?\",\r\n      sentTime: \"just now\",\r\n      sender: \"Chatbot\"\r\n    }\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  // Cohere API Key\r\n  const COHERE_API_KEY = 'CcXjY2oBhjqiWnxPrUe5nKTMByJysMYLkSMNPrek'; \r\n\r\n  const handleSend = async (message) => {\r\n    const newMessage = {\r\n      message,\r\n      direction: 'outgoing',\r\n      sender: \"user\"\r\n    };\r\n\r\n    const newMessages = [...messages, newMessage];\r\n    setMessages(newMessages);\r\n\r\n    // Set the typing indicator\r\n    setIsTyping(true);\r\n\r\n    // Fetch response from predefined responses or Cohere API\r\n    const responseMessage = await getChatbotResponse(message);\r\n\r\n    setMessages([...newMessages, {\r\n      message: responseMessage,\r\n      sender: \"Chatbot\"\r\n    }]);\r\n\r\n    setIsTyping(false);\r\n  };\r\n\r\n  // Function to fetch response from Cohere API or use predefined responses\r\n  async function getChatbotResponse(userMessage) {\r\n    // Check if message contains any of the predefined keywords\r\n    const lowercasedMessage = userMessage.toLowerCase();\r\n    for (const [keyword, response] of Object.entries(predefinedResponses)) {\r\n      if (lowercasedMessage.includes(keyword)) {\r\n        return response;\r\n      }\r\n    }\r\n\r\n    // If no predefined response is found, get response from Cohere API\r\n    return getCohereApiResponse(userMessage);\r\n  }\r\n\r\n  // Function to fetch response from Cohere API\r\n  async function getCohereApiResponse(userMessage) {\r\n    try {\r\n      const response = await axios.post(\r\n        'https://api.cohere.ai/v1/generate',\r\n        {\r\n          model: \"command-xlarge-nightly\", // Adjust based on available models\r\n          prompt: userMessage,\r\n          max_tokens: 150,\r\n          temperature: 0.7\r\n        },\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${COHERE_API_KEY}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n      console.log(\"Cohere API response:\", response.data); // Log full response\r\n      return response.data.generations[0].text.trim(); // Adjust based on actual response format\r\n    } catch (error) {\r\n      console.error(\"Error fetching response from Cohere API:\", error.response ? error.response.data : error.message);\r\n      return \"Sorry, I'm having trouble responding right now. Please try again later.\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ position: \"relative\", height: \"500px\", width: \"350px\" }}>\r\n        <MainContainer>\r\n          <ChatContainer>\r\n            <MessageList \r\n              scrollBehavior=\"smooth\" \r\n              typingIndicator={isTyping ? <TypingIndicator content=\"Chatbot is typing\" /> : null}\r\n            >\r\n              {messages.map((message, i) => (\r\n                <Message key={i} model={message} />\r\n              ))}\r\n            </MessageList>\r\n            <MessageInput placeholder=\"Type message here\" onSend={handleSend} />        \r\n          </ChatContainer>\r\n        </MainContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"]},"metadata":{},"sourceType":"module"}