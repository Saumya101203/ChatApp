{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\ChatWebApp\\\\Files\\\\public\\\\src\\\\components\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport axios from 'axios';\nimport './Chatbot.css';\n\n// Define predefined responses\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst predefinedResponses = {\n  \"features\": \"Here are some features of our app: 1. Real-time messaging 2. User profiles 3. Avatar customization. Feel free to ask if you need more details!\",\n  \"error\": \"If you encounter errors, please check the following: 1. Ensure you have a stable internet connection. 2. Check for updates. 3. Restart the app if the issue persists.\",\n  \"issue\": \"If you encounter issues, try the following: 1. Ensure you have a stable internet connection. 2. Check for updates. 3. Restart the app if necessary.\",\n  \"use\": \"To use the app, simply log in/Create new Account, select a contact, and start chatting. You can also customize your profile and set an avatar.\",\n  \"login\": \"For login issues, please check if your username and password are correct. If the problem persists, try resetting your password.\",\n  \"contact\": \"To contact support, please send us an email at sp.singh.302101@gmail.com.\",\n  \"default\": \"Hi there! I'm here to assist you with the features of this app and common issues. If you have any questions or need help, feel free to ask!\"\n};\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello! I'm here to help you with the features of this app and any common errors you might encounter. How can I assist you today?\",\n    sentTime: \"just now\",\n    sender: \"Chatbot\",\n    direction: 'incoming' // Initial message from Chatbot\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Cohere API Key\n  const COHERE_API_KEY = 'CcXjY2oBhjqiWnxPrUe5nKTMByJysMYLkSMNPrek';\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n\n    // Set the typing indicator\n    setIsTyping(true);\n\n    // Fetch response from predefined responses or Cohere API\n    const responseMessage = await getChatbotResponse(message);\n    setMessages([...newMessages, {\n      message: responseMessage,\n      direction: 'incoming',\n      sender: \"Chatbot\"\n    }]);\n    setIsTyping(false);\n  };\n\n  // Function to fetch response from Cohere API or use predefined responses\n  async function getChatbotResponse(userMessage) {\n    // Check if message contains any of the predefined keywords\n    const lowercasedMessage = userMessage.toLowerCase();\n    for (const [keyword, response] of Object.entries(predefinedResponses)) {\n      if (lowercasedMessage.includes(keyword)) {\n        return response;\n      }\n    }\n\n    // If no predefined response is found, get response from Cohere API\n    return getCohereApiResponse(userMessage);\n  }\n\n  // Function to fetch response from Cohere API\n  async function getCohereApiResponse(userMessage) {\n    try {\n      const response = await axios.post('https://api.cohere.ai/v1/generate', {\n        model: \"command-xlarge-nightly\",\n        // Adjust based on available models\n        prompt: userMessage,\n        max_tokens: 150,\n        temperature: 0.7\n      }, {\n        headers: {\n          'Authorization': `Bearer ${COHERE_API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(\"Cohere API response:\", response.data); // Log full response\n      return response.data.generations[0].text.trim(); // Adjust based on actual response format\n    } catch (error) {\n      console.error(\"Error fetching response from Cohere API:\", error.response ? error.response.data : error.message);\n      return \"Sorry, I'm having trouble responding right now. Please try again later.\";\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"500px\",\n        width: \"350px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            scrollBehavior: \"smooth\",\n            typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"Chatbot is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 43\n            }, this) : null,\n            children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n              model: message\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"7faLs++cdLxhDK4pL/1LfBizuXU=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","axios","jsxDEV","_jsxDEV","predefinedResponses","Chatbot","_s","messages","setMessages","message","sentTime","sender","direction","isTyping","setIsTyping","COHERE_API_KEY","handleSend","newMessage","newMessages","responseMessage","getChatbotResponse","userMessage","lowercasedMessage","toLowerCase","keyword","response","Object","entries","includes","getCohereApiResponse","post","model","prompt","max_tokens","temperature","headers","console","log","data","generations","text","trim","error","className","children","style","position","height","width","scrollBehavior","typingIndicator","content","fileName","_jsxFileName","lineNumber","columnNumber","map","i","placeholder","onSend","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/ChatWebApp/Files/public/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\r\nimport axios from 'axios';\r\nimport './Chatbot.css';\r\n\r\n// Define predefined responses\r\nconst predefinedResponses = {\r\n  \"features\": \"Here are some features of our app: 1. Real-time messaging 2. User profiles 3. Avatar customization. Feel free to ask if you need more details!\",\r\n  \"error\": \"If you encounter errors, please check the following: 1. Ensure you have a stable internet connection. 2. Check for updates. 3. Restart the app if the issue persists.\",\r\n  \"issue\": \"If you encounter issues, try the following: 1. Ensure you have a stable internet connection. 2. Check for updates. 3. Restart the app if necessary.\",\r\n  \"use\": \"To use the app, simply log in/Create new Account, select a contact, and start chatting. You can also customize your profile and set an avatar.\",\r\n  \"login\": \"For login issues, please check if your username and password are correct. If the problem persists, try resetting your password.\",\r\n  \"contact\": \"To contact support, please send us an email at sp.singh.302101@gmail.com.\",\r\n  \"default\": \"Hi there! I'm here to assist you with the features of this app and common issues. If you have any questions or need help, feel free to ask!\"\r\n};\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      message: \"Hello! I'm here to help you with the features of this app and any common errors you might encounter. How can I assist you today?\",\r\n      sentTime: \"just now\",\r\n      sender: \"Chatbot\",\r\n      direction: 'incoming' // Initial message from Chatbot\r\n    }\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  // Cohere API Key\r\n  const COHERE_API_KEY = 'CcXjY2oBhjqiWnxPrUe5nKTMByJysMYLkSMNPrek';\r\n\r\n  const handleSend = async (message) => {\r\n    const newMessage = {\r\n      message,\r\n      direction: 'outgoing',\r\n      sender: \"user\"\r\n    };\r\n\r\n    const newMessages = [...messages, newMessage];\r\n    setMessages(newMessages);\r\n\r\n    // Set the typing indicator\r\n    setIsTyping(true);\r\n\r\n    // Fetch response from predefined responses or Cohere API\r\n    const responseMessage = await getChatbotResponse(message);\r\n\r\n    setMessages([...newMessages, {\r\n      message: responseMessage,\r\n      direction: 'incoming',\r\n      sender: \"Chatbot\"\r\n    }]);\r\n\r\n    setIsTyping(false);\r\n  };\r\n\r\n  // Function to fetch response from Cohere API or use predefined responses\r\n  async function getChatbotResponse(userMessage) {\r\n    // Check if message contains any of the predefined keywords\r\n    const lowercasedMessage = userMessage.toLowerCase();\r\n    for (const [keyword, response] of Object.entries(predefinedResponses)) {\r\n      if (lowercasedMessage.includes(keyword)) {\r\n        return response;\r\n      }\r\n    }\r\n\r\n    // If no predefined response is found, get response from Cohere API\r\n    return getCohereApiResponse(userMessage);\r\n  }\r\n\r\n  // Function to fetch response from Cohere API\r\n  async function getCohereApiResponse(userMessage) {\r\n    try {\r\n      const response = await axios.post(\r\n        'https://api.cohere.ai/v1/generate',\r\n        {\r\n          model: \"command-xlarge-nightly\", // Adjust based on available models\r\n          prompt: userMessage,\r\n          max_tokens: 150,\r\n          temperature: 0.7\r\n        },\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${COHERE_API_KEY}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n      console.log(\"Cohere API response:\", response.data); // Log full response\r\n      return response.data.generations[0].text.trim(); // Adjust based on actual response format\r\n    } catch (error) {\r\n      console.error(\"Error fetching response from Cohere API:\", error.response ? error.response.data : error.message);\r\n      return \"Sorry, I'm having trouble responding right now. Please try again later.\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ position: \"relative\", height: \"500px\", width: \"350px\" }}>\r\n        <MainContainer>\r\n          <ChatContainer>\r\n            <MessageList \r\n              scrollBehavior=\"smooth\" \r\n              typingIndicator={isTyping ? <TypingIndicator content=\"Chatbot is typing\" /> : null}\r\n            >\r\n              {messages.map((message, i) => (\r\n                <Message key={i} model={message} />\r\n              ))}\r\n            </MessageList>\r\n            <MessageInput placeholder=\"Type message here\" onSend={handleSend} />        \r\n          </ChatContainer>\r\n        </MainContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}