{"ast":null,"code":"'use strict';\n\nvar CanceledError = require('./CanceledError');\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\n\n\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n  var token = this; // eslint-disable-next-line func-names\n\n  this.promise.then(function (cancel) {\n    if (!token._listeners) return;\n    var i = token._listeners.length;\n\n    while (i-- > 0) {\n      token._listeners[i](cancel);\n    }\n\n    token._listeners = null;\n  }); // eslint-disable-next-line func-names\n\n  this.promise.then = function (onfulfilled) {\n    var _resolve; // eslint-disable-next-line func-names\n\n\n    var promise = new Promise(function (resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message, config, request) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new CanceledError(message, config, request);\n    resolvePromise(token.reason);\n  });\n}\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\n\n\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n/**\n * Subscribe to the cancel signal\n */\n\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n/**\n * Unsubscribe from the cancel signal\n */\n\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n\n  var index = this._listeners.indexOf(listener);\n\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\n\n\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;","map":{"version":3,"sources":["C:/Users/dell/Desktop/ChatWebApp/Files/public/node_modules/axios/lib/cancel/CancelToken.js"],"names":["CanceledError","require","CancelToken","executor","TypeError","resolvePromise","promise","Promise","promiseExecutor","resolve","token","then","cancel","_listeners","i","length","onfulfilled","_resolve","subscribe","reject","unsubscribe","message","config","request","reason","prototype","throwIfRequested","listener","push","index","indexOf","splice","source","c","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAIC,SAAJ,CAAc,8BAAd,CAAN;AACD;;AAED,MAAIC,cAAJ;AAEA,OAAKC,OAAL,GAAe,IAAIC,OAAJ,CAAY,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAC3DJ,IAAAA,cAAc,GAAGI,OAAjB;AACD,GAFc,CAAf;AAIA,MAAIC,KAAK,GAAG,IAAZ,CAX6B,CAa7B;;AACA,OAAKJ,OAAL,CAAaK,IAAb,CAAkB,UAASC,MAAT,EAAiB;AACjC,QAAI,CAACF,KAAK,CAACG,UAAX,EAAuB;AAEvB,QAAIC,CAAC,GAAGJ,KAAK,CAACG,UAAN,CAAiBE,MAAzB;;AAEA,WAAOD,CAAC,KAAK,CAAb,EAAgB;AACdJ,MAAAA,KAAK,CAACG,UAAN,CAAiBC,CAAjB,EAAoBF,MAApB;AACD;;AACDF,IAAAA,KAAK,CAACG,UAAN,GAAmB,IAAnB;AACD,GATD,EAd6B,CAyB7B;;AACA,OAAKP,OAAL,CAAaK,IAAb,GAAoB,UAASK,WAAT,EAAsB;AACxC,QAAIC,QAAJ,CADwC,CAExC;;;AACA,QAAIX,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAASE,OAAT,EAAkB;AAC1CC,MAAAA,KAAK,CAACQ,SAAN,CAAgBT,OAAhB;AACAQ,MAAAA,QAAQ,GAAGR,OAAX;AACD,KAHa,EAGXE,IAHW,CAGNK,WAHM,CAAd;;AAKAV,IAAAA,OAAO,CAACM,MAAR,GAAiB,SAASO,MAAT,GAAkB;AACjCT,MAAAA,KAAK,CAACU,WAAN,CAAkBH,QAAlB;AACD,KAFD;;AAIA,WAAOX,OAAP;AACD,GAbD;;AAeAH,EAAAA,QAAQ,CAAC,SAASS,MAAT,CAAgBS,OAAhB,EAAyBC,MAAzB,EAAiCC,OAAjC,EAA0C;AACjD,QAAIb,KAAK,CAACc,MAAV,EAAkB;AAChB;AACA;AACD;;AAEDd,IAAAA,KAAK,CAACc,MAAN,GAAe,IAAIxB,aAAJ,CAAkBqB,OAAlB,EAA2BC,MAA3B,EAAmCC,OAAnC,CAAf;AACAlB,IAAAA,cAAc,CAACK,KAAK,CAACc,MAAP,CAAd;AACD,GARO,CAAR;AASD;AAED;AACA;AACA;;;AACAtB,WAAW,CAACuB,SAAZ,CAAsBC,gBAAtB,GAAyC,SAASA,gBAAT,GAA4B;AACnE,MAAI,KAAKF,MAAT,EAAiB;AACf,UAAM,KAAKA,MAAX;AACD;AACF,CAJD;AAMA;AACA;AACA;;;AAEAtB,WAAW,CAACuB,SAAZ,CAAsBP,SAAtB,GAAkC,SAASA,SAAT,CAAmBS,QAAnB,EAA6B;AAC7D,MAAI,KAAKH,MAAT,EAAiB;AACfG,IAAAA,QAAQ,CAAC,KAAKH,MAAN,CAAR;AACA;AACD;;AAED,MAAI,KAAKX,UAAT,EAAqB;AACnB,SAAKA,UAAL,CAAgBe,IAAhB,CAAqBD,QAArB;AACD,GAFD,MAEO;AACL,SAAKd,UAAL,GAAkB,CAACc,QAAD,CAAlB;AACD;AACF,CAXD;AAaA;AACA;AACA;;;AAEAzB,WAAW,CAACuB,SAAZ,CAAsBL,WAAtB,GAAoC,SAASA,WAAT,CAAqBO,QAArB,EAA+B;AACjE,MAAI,CAAC,KAAKd,UAAV,EAAsB;AACpB;AACD;;AACD,MAAIgB,KAAK,GAAG,KAAKhB,UAAL,CAAgBiB,OAAhB,CAAwBH,QAAxB,CAAZ;;AACA,MAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,SAAKhB,UAAL,CAAgBkB,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACD;AACF,CARD;AAUA;AACA;AACA;AACA;;;AACA3B,WAAW,CAAC8B,MAAZ,GAAqB,SAASA,MAAT,GAAkB;AACrC,MAAIpB,MAAJ;AACA,MAAIF,KAAK,GAAG,IAAIR,WAAJ,CAAgB,SAASC,QAAT,CAAkB8B,CAAlB,EAAqB;AAC/CrB,IAAAA,MAAM,GAAGqB,CAAT;AACD,GAFW,CAAZ;AAGA,SAAO;AACLvB,IAAAA,KAAK,EAAEA,KADF;AAELE,IAAAA,MAAM,EAAEA;AAFH,GAAP;AAID,CATD;;AAWAsB,MAAM,CAACC,OAAP,GAAiBjC,WAAjB","sourcesContent":["'use strict';\n\nvar CanceledError = require('./CanceledError');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i = token._listeners.length;\n\n    while (i-- > 0) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message, config, request) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new CanceledError(message, config, request);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n"]},"metadata":{},"sourceType":"script"}