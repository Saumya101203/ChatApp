{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils');\n\nvar AxiosURLSearchParams = require('../helpers/AxiosURLSearchParams');\n\nfunction encode(val) {\n  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');\n}\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n * @returns {string} The formatted url\n */\n\n\nmodule.exports = function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var hashmarkIndex = url.indexOf('#');\n\n  if (hashmarkIndex !== -1) {\n    url = url.slice(0, hashmarkIndex);\n  }\n\n  var _encode = options && options.encode || encode;\n\n  var serializeFn = options && options.serialize;\n  var serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};","map":{"version":3,"sources":["C:/Users/dell/Desktop/ChatWebApp/Files/public/node_modules/axios/lib/helpers/buildURL.js"],"names":["utils","require","AxiosURLSearchParams","encode","val","encodeURIComponent","replace","module","exports","buildURL","url","params","options","hashmarkIndex","indexOf","slice","_encode","serializeFn","serialize","serializedParams","isURLSearchParams","toString"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,iCAAD,CAAlC;;AAEA,SAASE,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,SAAOC,kBAAkB,CAACD,GAAD,CAAlB,CACLE,OADK,CACG,OADH,EACY,GADZ,EAELA,OAFK,CAEG,MAFH,EAEW,GAFX,EAGLA,OAHK,CAGG,OAHH,EAGY,GAHZ,EAILA,OAJK,CAIG,MAJH,EAIW,GAJX,EAKLA,OALK,CAKG,OALH,EAKY,GALZ,EAMLA,OANK,CAMG,OANH,EAMY,GANZ,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;AACvD;AACA,MAAI,CAACD,MAAL,EAAa;AACX,WAAOD,GAAP;AACD;;AAED,MAAIG,aAAa,GAAGH,GAAG,CAACI,OAAJ,CAAY,GAAZ,CAApB;;AAEA,MAAID,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxBH,IAAAA,GAAG,GAAGA,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAaF,aAAb,CAAN;AACD;;AAED,MAAIG,OAAO,GAAGJ,OAAO,IAAIA,OAAO,CAACT,MAAnB,IAA6BA,MAA3C;;AAEA,MAAIc,WAAW,GAAGL,OAAO,IAAIA,OAAO,CAACM,SAArC;AAEA,MAAIC,gBAAJ;;AAEA,MAAIF,WAAJ,EAAiB;AACfE,IAAAA,gBAAgB,GAAGF,WAAW,CAACN,MAAD,EAASC,OAAT,CAA9B;AACD,GAFD,MAEO;AACLO,IAAAA,gBAAgB,GAAGnB,KAAK,CAACoB,iBAAN,CAAwBT,MAAxB,IACjBA,MAAM,CAACU,QAAP,EADiB,GAEjB,IAAInB,oBAAJ,CAAyBS,MAAzB,EAAiCC,OAAjC,EAA0CS,QAA1C,CAAmDL,OAAnD,CAFF;AAGD;;AAED,MAAIG,gBAAJ,EAAsB;AACpBT,IAAAA,GAAG,IAAI,CAACA,GAAG,CAACI,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,GAA1B,GAAgC,GAAjC,IAAwCK,gBAA/C;AACD;;AAED,SAAOT,GAAP;AACD,CA/BD","sourcesContent":["'use strict';\n\nvar utils = require('../utils');\nvar AxiosURLSearchParams = require('../helpers/AxiosURLSearchParams');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var hashmarkIndex = url.indexOf('#');\n\n  if (hashmarkIndex !== -1) {\n    url = url.slice(0, hashmarkIndex);\n  }\n\n  var _encode = options && options.encode || encode;\n\n  var serializeFn = options && options.serialize;\n\n  var serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n"]},"metadata":{},"sourceType":"script"}