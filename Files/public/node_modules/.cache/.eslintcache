[{"C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\index.js":"1","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\App.js":"2","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\pages\\Chat.jsx":"3","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\pages\\Register.jsx":"4","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\pages\\Login.jsx":"5","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\SetAvatar.jsx":"6","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\ChatContainer.jsx":"7","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\utils\\APIRoutes.js":"8","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\Welcome.jsx":"9","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\Contacts.jsx":"10","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\Logout.jsx":"11","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\ChatInput.jsx":"12","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\Chatbot.jsx":"13"},{"size":228,"mtime":1726352179440,"results":"14","hashOfConfig":"15"},{"size":1331,"mtime":1726352639997,"results":"16","hashOfConfig":"15"},{"size":2382,"mtime":1726352179441,"results":"17","hashOfConfig":"15"},{"size":4849,"mtime":1726352179442,"results":"18","hashOfConfig":"15"},{"size":4003,"mtime":1726352179441,"results":"19","hashOfConfig":"15"},{"size":4290,"mtime":1726352179438,"results":"20","hashOfConfig":"15"},{"size":4602,"mtime":1726352179435,"results":"21","hashOfConfig":"15"},{"size":464,"mtime":1726352179442,"results":"22","hashOfConfig":"15"},{"size":832,"mtime":1726352179439,"results":"23","hashOfConfig":"15"},{"size":3858,"mtime":1726352179437,"results":"24","hashOfConfig":"15"},{"size":995,"mtime":1726352179437,"results":"25","hashOfConfig":"15"},{"size":3576,"mtime":1726352179436,"results":"26","hashOfConfig":"15"},{"size":4715,"mtime":1726399895877,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"31uca9",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\index.js",[],[],"C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\App.js",[],[],"C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\pages\\Chat.jsx",["74","75","76","77"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { io } from \"socket.io-client\";\r\nimport styled from \"styled-components\";\r\nimport { allUsersRoute, host } from \"../utils/APIRoutes\";\r\nimport ChatContainer from \"../components/ChatContainer\";\r\nimport Contacts from \"../components/Contacts\";\r\nimport Welcome from \"../components/Welcome\";\r\n\r\nexport default function Chat() {\r\n  const navigate = useNavigate();\r\n  const socket = useRef();\r\n  const [contacts, setContacts] = useState([]);\r\n  const [currentChat, setCurrentChat] = useState(undefined);\r\n  const [currentUser, setCurrentUser] = useState(undefined);\r\n  useEffect(async () => {\r\n    if (!localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)) {\r\n      navigate(\"/login\");\r\n    } else {\r\n      setCurrentUser(\r\n        await JSON.parse(\r\n          localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n        )\r\n      );\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      socket.current = io(host);\r\n      socket.current.emit(\"add-user\", currentUser._id);\r\n    }\r\n  }, [currentUser]);\r\n\r\n  useEffect(async () => {\r\n    if (currentUser) {\r\n      if (currentUser.isAvatarImageSet) {\r\n        const data = await axios.get(`${allUsersRoute}/${currentUser._id}`);\r\n        setContacts(data.data);\r\n      } else {\r\n        navigate(\"/setAvatar\");\r\n      }\r\n    }\r\n  }, [currentUser]);\r\n  const handleChatChange = (chat) => {\r\n    setCurrentChat(chat);\r\n  };\r\n  return (\r\n    <>\r\n      <Container>\r\n        <div className=\"container\">\r\n          <Contacts contacts={contacts} changeChat={handleChatChange} />\r\n          {currentChat === undefined ? (\r\n            <Welcome />\r\n          ) : (\r\n            <ChatContainer currentChat={currentChat} socket={socket} />\r\n          )}\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  background-color: #131324;\r\n  .container {\r\n    height: 85vh;\r\n    width: 85vw;\r\n    background-color: #00000076;\r\n    display: grid;\r\n    grid-template-columns: 25% 75%;\r\n    @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n      grid-template-columns: 35% 65%;\r\n    }\r\n  }\r\n`;\r\n","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\pages\\Register.jsx",["78"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport Logo from \"../assets/logo.svg\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { registerRoute } from \"../utils/APIRoutes\";\r\n\r\nexport default function Register() {\r\n  const navigate = useNavigate();\r\n  const toastOptions = {\r\n    position: \"bottom-right\",\r\n    autoClose: 8000,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    theme: \"dark\",\r\n  };\r\n  const [values, setValues] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)) {\r\n      navigate(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (event) => {\r\n    setValues({ ...values, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleValidation = () => {\r\n    const { password, confirmPassword, username, email } = values;\r\n    if (password !== confirmPassword) {\r\n      toast.error(\r\n        \"Password and confirm password should be same.\",\r\n        toastOptions\r\n      );\r\n      return false;\r\n    } else if (username.length < 3) {\r\n      toast.error(\r\n        \"Username should be greater than 3 characters.\",\r\n        toastOptions\r\n      );\r\n      return false;\r\n    } else if (password.length < 8) {\r\n      toast.error(\r\n        \"Password should be equal or greater than 8 characters.\",\r\n        toastOptions\r\n      );\r\n      return false;\r\n    } else if (email === \"\") {\r\n      toast.error(\"Email is required.\", toastOptions);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (handleValidation()) {\r\n      const { email, username, password } = values;\r\n      const { data } = await axios.post(registerRoute, {\r\n        username,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (data.status === false) {\r\n        toast.error(data.msg, toastOptions);\r\n      }\r\n      if (data.status === true) {\r\n        localStorage.setItem(\r\n          process.env.REACT_APP_LOCALHOST_KEY,\r\n          JSON.stringify(data.user)\r\n        );\r\n        navigate(\"/\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContainer>\r\n        <form action=\"\" onSubmit={(event) => handleSubmit(event)}>\r\n          <div className=\"brand\">\r\n            <img src={Logo} alt=\"logo\" />\r\n            <h1>snappy</h1>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Username\"\r\n            name=\"username\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            name=\"email\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            name=\"password\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            name=\"confirmPassword\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n          <button type=\"submit\">Create User</button>\r\n          <span>\r\n            Already have an account ? <Link to=\"/login\">Login.</Link>\r\n          </span>\r\n        </form>\r\n      </FormContainer>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nconst FormContainer = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  background-color: #131324;\r\n  .brand {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    justify-content: center;\r\n    img {\r\n      height: 5rem;\r\n    }\r\n    h1 {\r\n      color: white;\r\n      text-transform: uppercase;\r\n    }\r\n  }\r\n\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n    background-color: #00000076;\r\n    border-radius: 2rem;\r\n    padding: 3rem 5rem;\r\n  }\r\n  input {\r\n    background-color: transparent;\r\n    padding: 1rem;\r\n    border: 0.1rem solid #4e0eff;\r\n    border-radius: 0.4rem;\r\n    color: white;\r\n    width: 100%;\r\n    font-size: 1rem;\r\n    &:focus {\r\n      border: 0.1rem solid #997af0;\r\n      outline: none;\r\n    }\r\n  }\r\n  button {\r\n    background-color: #4e0eff;\r\n    color: white;\r\n    padding: 1rem 2rem;\r\n    border: none;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border-radius: 0.4rem;\r\n    font-size: 1rem;\r\n    text-transform: uppercase;\r\n    &:hover {\r\n      background-color: #4e0eff;\r\n    }\r\n  }\r\n  span {\r\n    color: white;\r\n    text-transform: uppercase;\r\n    a {\r\n      color: #4e0eff;\r\n      text-decoration: none;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n`;\r\n","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\pages\\Login.jsx",["79"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport Logo from \"../assets/logo.svg\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { loginRoute } from \"../utils/APIRoutes\";\r\n\r\nexport default function Login() {\r\n  const navigate = useNavigate();\r\n  const [values, setValues] = useState({ username: \"\", password: \"\" });\r\n  const toastOptions = {\r\n    position: \"bottom-right\",\r\n    autoClose: 8000,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    theme: \"dark\",\r\n  };\r\n  useEffect(() => {\r\n    if (localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)) {\r\n      navigate(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (event) => {\r\n    setValues({ ...values, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const { username, password } = values;\r\n    if (username === \"\") {\r\n      toast.error(\"Email and Password is required.\", toastOptions);\r\n      return false;\r\n    } else if (password === \"\") {\r\n      toast.error(\"Email and Password is required.\", toastOptions);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (validateForm()) {\r\n      const { username, password } = values;\r\n      const { data } = await axios.post(loginRoute, {\r\n        username,\r\n        password,\r\n      });\r\n      if (data.status === false) {\r\n        toast.error(data.msg, toastOptions);\r\n      }\r\n      if (data.status === true) {\r\n        localStorage.setItem(\r\n          process.env.REACT_APP_LOCALHOST_KEY,\r\n          JSON.stringify(data.user)\r\n        );\r\n\r\n        navigate(\"/\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContainer>\r\n        <form action=\"\" onSubmit={(event) => handleSubmit(event)}>\r\n          <div className=\"brand\">\r\n            <img src={Logo} alt=\"logo\" />\r\n            <h1>snappy</h1>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Username\"\r\n            name=\"username\"\r\n            onChange={(e) => handleChange(e)}\r\n            min=\"3\"\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            name=\"password\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n          <button type=\"submit\">Log In</button>\r\n          <span>\r\n            Don't have an account ? <Link to=\"/register\">Create One.</Link>\r\n          </span>\r\n        </form>\r\n      </FormContainer>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nconst FormContainer = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  background-color: #131324;\r\n  .brand {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    justify-content: center;\r\n    img {\r\n      height: 5rem;\r\n    }\r\n    h1 {\r\n      color: white;\r\n      text-transform: uppercase;\r\n    }\r\n  }\r\n\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n    background-color: #00000076;\r\n    border-radius: 2rem;\r\n    padding: 5rem;\r\n  }\r\n  input {\r\n    background-color: transparent;\r\n    padding: 1rem;\r\n    border: 0.1rem solid #4e0eff;\r\n    border-radius: 0.4rem;\r\n    color: white;\r\n    width: 100%;\r\n    font-size: 1rem;\r\n    &:focus {\r\n      border: 0.1rem solid #997af0;\r\n      outline: none;\r\n    }\r\n  }\r\n  button {\r\n    background-color: #4e0eff;\r\n    color: white;\r\n    padding: 1rem 2rem;\r\n    border: none;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border-radius: 0.4rem;\r\n    font-size: 1rem;\r\n    text-transform: uppercase;\r\n    &:hover {\r\n      background-color: #4e0eff;\r\n    }\r\n  }\r\n  span {\r\n    color: white;\r\n    text-transform: uppercase;\r\n    a {\r\n      color: #4e0eff;\r\n      text-decoration: none;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n`;\r\n","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\SetAvatar.jsx",["80","81","82","83"],[],"import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport { Buffer } from \"buffer\";\r\nimport loader from \"../assets/loader.gif\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { setAvatarRoute } from \"../utils/APIRoutes\";\r\nexport default function SetAvatar() {\r\n  const api = `https://api.multiavatar.com/4645646`;\r\n  const navigate = useNavigate();\r\n  const [avatars, setAvatars] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\r\n  const toastOptions = {\r\n    position: \"bottom-right\",\r\n    autoClose: 8000,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    theme: \"dark\",\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (!localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY))\r\n      navigate(\"/login\");\r\n  }, []);\r\n\r\n  const setProfilePicture = async () => {\r\n    if (selectedAvatar === undefined) {\r\n      toast.error(\"Please select an avatar\", toastOptions);\r\n    } else {\r\n      const user = await JSON.parse(\r\n        localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n      );\r\n\r\n      const { data } = await axios.post(`${setAvatarRoute}/${user._id}`, {\r\n        image: avatars[selectedAvatar],\r\n      });\r\n\r\n      if (data.isSet) {\r\n        user.isAvatarImageSet = true;\r\n        user.avatarImage = data.image;\r\n        localStorage.setItem(\r\n          process.env.REACT_APP_LOCALHOST_KEY,\r\n          JSON.stringify(user)\r\n        );\r\n        navigate(\"/\");\r\n      } else {\r\n        toast.error(\"Error setting avatar. Please try again.\", toastOptions);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(async () => {\r\n    const data = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      const image = await axios.get(\r\n        `${api}/${Math.round(Math.random() * 1000)}`\r\n      );\r\n      const buffer = new Buffer(image.data);\r\n      data.push(buffer.toString(\"base64\"));\r\n    }\r\n    setAvatars(data);\r\n    setIsLoading(false);\r\n  }, []);\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Container>\r\n          <img src={loader} alt=\"loader\" className=\"loader\" />\r\n        </Container>\r\n      ) : (\r\n        <Container>\r\n          <div className=\"title-container\">\r\n            <h1>Pick an Avatar as your profile picture</h1>\r\n          </div>\r\n          <div className=\"avatars\">\r\n            {avatars.map((avatar, index) => {\r\n              return (\r\n                <div\r\n                  className={`avatar ${\r\n                    selectedAvatar === index ? \"selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <img\r\n                    src={`data:image/svg+xml;base64,${avatar}`}\r\n                    alt=\"avatar\"\r\n                    key={avatar}\r\n                    onClick={() => setSelectedAvatar(index)}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <button onClick={setProfilePicture} className=\"submit-btn\">\r\n            Set as Profile Picture\r\n          </button>\r\n          <ToastContainer />\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 3rem;\r\n  background-color: #131324;\r\n  height: 100vh;\r\n  width: 100vw;\r\n\r\n  .loader {\r\n    max-inline-size: 100%;\r\n  }\r\n\r\n  .title-container {\r\n    h1 {\r\n      color: white;\r\n    }\r\n  }\r\n  .avatars {\r\n    display: flex;\r\n    gap: 2rem;\r\n\r\n    .avatar {\r\n      border: 0.4rem solid transparent;\r\n      padding: 0.4rem;\r\n      border-radius: 5rem;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      transition: 0.5s ease-in-out;\r\n      img {\r\n        height: 6rem;\r\n        transition: 0.5s ease-in-out;\r\n      }\r\n    }\r\n    .selected {\r\n      border: 0.4rem solid #4e0eff;\r\n    }\r\n  }\r\n  .submit-btn {\r\n    background-color: #4e0eff;\r\n    color: white;\r\n    padding: 1rem 2rem;\r\n    border: none;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border-radius: 0.4rem;\r\n    font-size: 1rem;\r\n    text-transform: uppercase;\r\n    &:hover {\r\n      background-color: #4e0eff;\r\n    }\r\n  }\r\n`;\r\n","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\ChatContainer.jsx",["84","85"],[],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport Logout from \"./Logout\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport axios from \"axios\";\r\nimport { sendMessageRoute, recieveMessageRoute } from \"../utils/APIRoutes\";\r\n\r\nexport default function ChatContainer({ currentChat, socket }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const scrollRef = useRef();\r\n  const [arrivalMessage, setArrivalMessage] = useState(null);\r\n\r\n  useEffect(async () => {\r\n    const data = await JSON.parse(\r\n      localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n    );\r\n    const response = await axios.post(recieveMessageRoute, {\r\n      from: data._id,\r\n      to: currentChat._id,\r\n    });\r\n    setMessages(response.data);\r\n  }, [currentChat]);\r\n\r\n  useEffect(() => {\r\n    const getCurrentChat = async () => {\r\n      if (currentChat) {\r\n        await JSON.parse(\r\n          localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n        )._id;\r\n      }\r\n    };\r\n    getCurrentChat();\r\n  }, [currentChat]);\r\n\r\n  const handleSendMsg = async (msg) => {\r\n    const data = await JSON.parse(\r\n      localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n    );\r\n    socket.current.emit(\"send-msg\", {\r\n      to: currentChat._id,\r\n      from: data._id,\r\n      msg,\r\n    });\r\n    await axios.post(sendMessageRoute, {\r\n      from: data._id,\r\n      to: currentChat._id,\r\n      message: msg,\r\n    });\r\n\r\n    const msgs = [...messages];\r\n    msgs.push({ fromSelf: true, message: msg });\r\n    setMessages(msgs);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket.current) {\r\n      socket.current.on(\"msg-recieve\", (msg) => {\r\n        setArrivalMessage({ fromSelf: false, message: msg });\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    arrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\r\n  }, [arrivalMessage]);\r\n\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"chat-header\">\r\n        <div className=\"user-details\">\r\n          <div className=\"avatar\">\r\n            <img\r\n              src={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n          <div className=\"username\">\r\n            <h3>{currentChat.username}</h3>\r\n          </div>\r\n        </div>\r\n        <Logout />\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message) => {\r\n          return (\r\n            <div ref={scrollRef} key={uuidv4()}>\r\n              <div\r\n                className={`message ${\r\n                  message.fromSelf ? \"sended\" : \"recieved\"\r\n                }`}\r\n              >\r\n                <div className=\"content \">\r\n                  <p>{message.message}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <ChatInput handleSendMsg={handleSendMsg} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 10% 80% 10%;\r\n  gap: 0.1rem;\r\n  overflow: hidden;\r\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n    grid-template-rows: 15% 70% 15%;\r\n  }\r\n  .chat-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 0 2rem;\r\n    .user-details {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n      .avatar {\r\n        img {\r\n          height: 3rem;\r\n        }\r\n      }\r\n      .username {\r\n        h3 {\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .chat-messages {\r\n    padding: 1rem 2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    overflow: auto;\r\n    &::-webkit-scrollbar {\r\n      width: 0.2rem;\r\n      &-thumb {\r\n        background-color: #ffffff39;\r\n        width: 0.1rem;\r\n        border-radius: 1rem;\r\n      }\r\n    }\r\n    .message {\r\n      display: flex;\r\n      align-items: center;\r\n      .content {\r\n        max-width: 40%;\r\n        overflow-wrap: break-word;\r\n        padding: 1rem;\r\n        font-size: 1.1rem;\r\n        border-radius: 1rem;\r\n        color: #d1d1d1;\r\n        @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n          max-width: 70%;\r\n        }\r\n      }\r\n    }\r\n    .sended {\r\n      justify-content: flex-end;\r\n      .content {\r\n        background-color: #4f04ff21;\r\n      }\r\n    }\r\n    .recieved {\r\n      justify-content: flex-start;\r\n      .content {\r\n        background-color: #9900ff20;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\utils\\APIRoutes.js",[],[],"C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\Welcome.jsx",["86"],[],"import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Robot from \"../assets/robot.gif\";\r\nexport default function Welcome() {\r\n  const [userName, setUserName] = useState(\"\");\r\n  useEffect(async () => {\r\n    setUserName(\r\n      await JSON.parse(\r\n        localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n      ).username\r\n    );\r\n  }, []);\r\n  return (\r\n    <Container>\r\n      <img src={Robot} alt=\"\" />\r\n      <h1>\r\n        Welcome, <span>{userName}!</span>\r\n      </h1>\r\n      <h3>Please select a chat to Start messaging.</h3>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  flex-direction: column;\r\n  img {\r\n    height: 20rem;\r\n  }\r\n  span {\r\n    color: #4e0eff;\r\n  }\r\n`;\r\n","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\Contacts.jsx",["87"],[],"import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Logo from \"../assets/logo.svg\";\r\n\r\nexport default function Contacts({ contacts, changeChat }) {\r\n  const [currentUserName, setCurrentUserName] = useState(undefined);\r\n  const [currentUserImage, setCurrentUserImage] = useState(undefined);\r\n  const [currentSelected, setCurrentSelected] = useState(undefined);\r\n  useEffect(async () => {\r\n    const data = await JSON.parse(\r\n      localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n    );\r\n    setCurrentUserName(data.username);\r\n    setCurrentUserImage(data.avatarImage);\r\n  }, []);\r\n  const changeCurrentChat = (index, contact) => {\r\n    setCurrentSelected(index);\r\n    changeChat(contact);\r\n  };\r\n  return (\r\n    <>\r\n      {currentUserImage && currentUserImage && (\r\n        <Container>\r\n          <div className=\"brand\">\r\n            <img src={Logo} alt=\"logo\" />\r\n            <h3>snappy</h3>\r\n          </div>\r\n          <div className=\"contacts\">\r\n            {contacts.map((contact, index) => {\r\n              return (\r\n                <div\r\n                  key={contact._id}\r\n                  className={`contact ${\r\n                    index === currentSelected ? \"selected\" : \"\"\r\n                  }`}\r\n                  onClick={() => changeCurrentChat(index, contact)}\r\n                >\r\n                  <div className=\"avatar\">\r\n                    <img\r\n                      src={`data:image/svg+xml;base64,${contact.avatarImage}`}\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"username\">\r\n                    <h3>{contact.username}</h3>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"current-user\">\r\n            <div className=\"avatar\">\r\n              <img\r\n                src={`data:image/svg+xml;base64,${currentUserImage}`}\r\n                alt=\"avatar\"\r\n              />\r\n            </div>\r\n            <div className=\"username\">\r\n              <h2>{currentUserName}</h2>\r\n            </div>\r\n          </div>\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 10% 75% 15%;\r\n  overflow: hidden;\r\n  background-color: #080420;\r\n  .brand {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    justify-content: center;\r\n    img {\r\n      height: 2rem;\r\n    }\r\n    h3 {\r\n      color: white;\r\n      text-transform: uppercase;\r\n    }\r\n  }\r\n  .contacts {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    overflow: auto;\r\n    gap: 0.8rem;\r\n    &::-webkit-scrollbar {\r\n      width: 0.2rem;\r\n      &-thumb {\r\n        background-color: #ffffff39;\r\n        width: 0.1rem;\r\n        border-radius: 1rem;\r\n      }\r\n    }\r\n    .contact {\r\n      background-color: #ffffff34;\r\n      min-height: 5rem;\r\n      cursor: pointer;\r\n      width: 90%;\r\n      border-radius: 0.2rem;\r\n      padding: 0.4rem;\r\n      display: flex;\r\n      gap: 1rem;\r\n      align-items: center;\r\n      transition: 0.5s ease-in-out;\r\n      .avatar {\r\n        img {\r\n          height: 3rem;\r\n        }\r\n      }\r\n      .username {\r\n        h3 {\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n    .selected {\r\n      background-color: #9a86f3;\r\n    }\r\n  }\r\n\r\n  .current-user {\r\n    background-color: #0d0d30;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 2rem;\r\n    .avatar {\r\n      img {\r\n        height: 4rem;\r\n        max-inline-size: 100%;\r\n      }\r\n    }\r\n    .username {\r\n      h2 {\r\n        color: white;\r\n      }\r\n    }\r\n    @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n      gap: 0.5rem;\r\n      .username {\r\n        h2 {\r\n          font-size: 1rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\Logout.jsx",[],[],"C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\ChatInput.jsx",[],[],"C:\\Users\\dell\\Desktop\\ChatWebApp\\Files\\public\\src\\components\\Chatbot.jsx",[],[],{"ruleId":"88","severity":1,"message":"89","line":17,"column":13,"nodeType":"90","endLine":27,"endColumn":4},{"ruleId":"88","severity":1,"message":"91","line":27,"column":6,"nodeType":"92","endLine":27,"endColumn":8,"suggestions":"93"},{"ruleId":"88","severity":1,"message":"89","line":35,"column":13,"nodeType":"90","endLine":44,"endColumn":4},{"ruleId":"88","severity":1,"message":"91","line":44,"column":6,"nodeType":"92","endLine":44,"endColumn":19,"suggestions":"94"},{"ruleId":"88","severity":1,"message":"91","line":30,"column":6,"nodeType":"92","endLine":30,"endColumn":8,"suggestions":"95"},{"ruleId":"88","severity":1,"message":"91","line":24,"column":6,"nodeType":"92","endLine":24,"endColumn":8,"suggestions":"96"},{"ruleId":"88","severity":1,"message":"89","line":24,"column":13,"nodeType":"90","endLine":27,"endColumn":4},{"ruleId":"88","severity":1,"message":"91","line":27,"column":6,"nodeType":"92","endLine":27,"endColumn":8,"suggestions":"97"},{"ruleId":"88","severity":1,"message":"89","line":55,"column":13,"nodeType":"90","endLine":66,"endColumn":4},{"ruleId":"88","severity":1,"message":"98","line":66,"column":6,"nodeType":"92","endLine":66,"endColumn":8,"suggestions":"99"},{"ruleId":"88","severity":1,"message":"89","line":14,"column":13,"nodeType":"90","endLine":23,"endColumn":4},{"ruleId":"88","severity":1,"message":"100","line":62,"column":6,"nodeType":"92","endLine":62,"endColumn":8,"suggestions":"101"},{"ruleId":"88","severity":1,"message":"89","line":6,"column":13,"nodeType":"90","endLine":12,"endColumn":4},{"ruleId":"88","severity":1,"message":"89","line":9,"column":13,"nodeType":"90","endLine":15,"endColumn":4},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["102"],["103"],["104"],["105"],["106"],"React Hook useEffect has a missing dependency: 'api'. Either include it or remove the dependency array.",["107"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["108"],{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"109","fix":"113"},{"desc":"109","fix":"114"},{"desc":"109","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [navigate]",{"range":"120","text":"121"},"Update the dependencies array to be: [currentUser, navigate]",{"range":"122","text":"123"},{"range":"124","text":"121"},{"range":"125","text":"121"},{"range":"126","text":"121"},"Update the dependencies array to be: [api]",{"range":"127","text":"128"},"Update the dependencies array to be: [socket]",{"range":"129","text":"130"},[993,995],"[navigate]",[1441,1454],"[currentUser, navigate]",[859,861],[795,797],[987,989],[2109,2111],"[api]",[1795,1797],"[socket]"]